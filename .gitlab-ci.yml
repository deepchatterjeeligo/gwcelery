variables:
  # Allow Celery to run as root, because everything runs as root under Docker.
  C_FORCE_ROOT: 'true'
  # Checking out the source is the exception rather than the rule because
  # most of our CI jobs run from tarballs or wheels or don't require the source
  # at all.
  GIT_STRATEGY: none

stages:
  - dist
  - test
  - deploy

# Build source distribution
sdist:
  image: python:3.7-slim
  stage: dist
  variables:
    GIT_STRATEGY: fetch
  before_script:
    # Versioneer will need access to the git tool.
    - apt-get -q update
    - apt-get -yq install --no-install-recommends git
  script:
    - python setup.py sdist
    - mv dist/* .
  artifacts:
    paths:
      - '*.tar.gz'

# Build binary distribution
bdist:
  image: python:3.7-slim
  stage: test
  script:
    - tar --strip-components 1 -xf *.tar.*
    - python setup.py bdist_wheel
    - mv dist/* .
  dependencies:
    - sdist
  artifacts:
    paths:
      - '*.whl'

# Build Docker container for dependencies
.dependencies: &dependencies
  stage: dist
  variables:
    GIT_STRATEGY: fetch
    IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_JOB_NAME:$CI_COMMIT_REF_NAME
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - |
      cat <<EOF > Dockerfile
      FROM python:${CI_JOB_NAME#*python}
      COPY requirements.txt .
      RUN pip --no-cache-dir install -r requirements.txt
      RUN rm -f requirements.txt
      EOF
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
    - if [ "${CI_COMMIT_TAG:0:1}" = "v" ]; then docker tag $IMAGE_TAG ${IMAGE_TAG%:*}:latest; docker push ${IMAGE_TAG%:*}:latest; fi
dependencies/python3.6:
  <<: *dependencies
dependencies/python3.7:
  <<: *dependencies

# Run unit tests and coverage measurement
.test: &test
  stage: test
  coverage: '/^TOTAL\s+.*\s+(\d+\.?\d*)%/'
  before_script:
    - apt-get update -qq && apt-get install -y -qq redis-server
  script:
    - tar --strip-components 1 -xf *.tar.*
    - pip install pytest-cov
    - python setup.py test --addopts='-vv --cov --cov-report=html --cov-report=term'
  dependencies:
    - sdist
  artifacts:
    paths:
      - htmlcov/
test/python3.6:
  image: $CI_REGISTRY_IMAGE/dependencies/python3.6:$CI_COMMIT_REF_NAME
  <<: *test
test/python3.7:
  image: $CI_REGISTRY_IMAGE/dependencies/python3.7:$CI_COMMIT_REF_NAME
  <<: *test

lint:
  image: $CI_REGISTRY_IMAGE/dependencies/python3.7:$CI_COMMIT_REF_NAME
  stage: test
  script:
    - tar --strip-components 1 -xf *.tar.*
    - pip install flake8 'pep8-naming!=0.8.0'
    - flake8 --show-source .
  dependencies:
    - sdist

# Build docker container for application itself
.docker: &docker
  stage: deploy
  script:
    - IMAGE_TAG=$CI_REGISTRY_IMAGE/${CI_JOB_NAME#*/}:$CI_COMMIT_REF_NAME
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - |
      cat <<EOF > Dockerfile
      FROM $CI_REGISTRY_IMAGE/dependencies/${CI_JOB_NAME#*/}:$CI_COMMIT_REF_NAME
      COPY *.whl .
      RUN pip install *.whl
      RUN rm -f *.whl
      USER nobody
      WORKDIR /tmp
      ENTRYPOINT ["gwcelery"]
      EOF
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
    - if [ "${CI_COMMIT_TAG:0:1}" = "v" ]; then docker tag $IMAGE_TAG ${IMAGE_TAG%:*}:latest; docker push ${IMAGE_TAG%:*}:latest; fi
  dependencies:
    - bdist
docker/python3.6:
  <<: *docker
docker/python3.7:
  <<: *docker

# Generate documentation
doc:
  image: python:3.7-slim
  stage: test
  before_script:
    - apt-get update -qq && apt-get install -y -qq graphviz
  script:
    - tar --strip-components 1 -xf *.tar.*
    - python setup.py build_sphinx
  dependencies:
    - sdist

# Publish coverage
pages:
  stage: deploy
  script:
    - mv htmlcov public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master
  dependencies:
    - test/python3.7

# Upload package to PyPI
pypi:
  stage: deploy
  image: python:3.7-slim
  script:
    - pip install twine
    - twine upload *.tar.* *.whl
  dependencies:
    - sdist
    - bdist
  only:
    - tags@emfollow/gwcelery
